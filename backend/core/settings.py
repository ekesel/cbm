"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "django-insecure-mwv$td$vi0sxb@%2ksfrfj^k4917qf(3!@rb7r#u_q_030wfr6")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "1") == "1"

ALLOWED_HOSTS = ["*"]



# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.postgres",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "users",
    "metrics",
    "etl"
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("POSTGRES_DB", "sldp"),
        "USER": os.environ.get("POSTGRES_USER", "sldp"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD", "sldp"),
        "HOST": os.environ.get("POSTGRES_HOST", "postgres"),
        "PORT": os.environ.get("POSTGRES_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "staticfiles"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "users.User" 

# DRF
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 50,
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# --- Celery core (already set in B-01) ---
CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.environ.get("CELERY_RESULT_BACKEND", "redis://redis:6379/1")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"

# --- Timezone & Beat (schedule nightly) ---
CELERY_TIMEZONE = "Asia/Kolkata"
CELERY_ENABLE_UTC = False  # so crontab uses IST directly

from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    "nightly-etl-all-boards": {
        "task": "etl.tasks.run_all_boards",
        "schedule": crontab(hour=1, minute=0),  # 01:00 IST every day
    },
    "offload-rawpayloads-15m": {
        "task": "etl.raw_storage.offload_rawpayloads",
        "schedule": 15 * 60,  # seconds
        "args": ()
    },
    # Daily at 02:00 IST: retention
    "rawpayload-retention-daily": {
        "task": "etl.raw_storage.rawpayload_retention",
        "schedule": crontab(hour=2, minute=0),
        "args": ()
    },
    # Every 30 minutes, send remediation summaries to Teams
    "remediation-notify-30m": {
        "task": "etl.notifier.notify_remediation_tickets",
        "schedule": 30 * 60,  # seconds
        "args": ()            # run for all boards
    },
    # Morning digest at 09:15 IST
    "remediation-notify-morning": {
        "task": "etl.notifier.notify_remediation_tickets",
        "schedule": crontab(hour=9, minute=15),
        "args": ()
    },
    "daily-metric-snapshot": {
        "task": "etl.snapshotter.run_daily_snapshot",
        "schedule": crontab(hour=3, minute=10),  # Asia/Kolkata timezone set earlier
        "args": ()
    },
    "sla-check-blocked-hourly": {
        "task": "etl.sla.sla_check_blocked",
        "schedule": 60 * 60,  # every hour
        "args": ()
    },
    # Nightly safety backfill (in case normalizers missed a transition)
    "blocked-since-backfill-nightly": {
        "task": "etl.sla.backfill_blocked_since",
        "schedule": crontab(hour=1, minute=30),  # after nightly ETL
        "args": ()
    },
}

APP_BASE_URL = os.environ.get("APP_BASE_URL", "http://localhost:8000/admin/metrics/remediationticket/")

JIRA_DEFAULT_FIELDS = [
    "summary", "issuetype", "status", "assignee", "reporter", "created",
    "updated", "resolutiondate", "customfield_10016",  # Story Points (adjust via MappingVersion if different)
    "parent", "labels", "priority", "project", "sprint", "fixVersions"
]
JIRA_DEFAULT_EXPAND = ["changelog"]

AZURE_DEFAULT_FIELDS = [
    "System.Id", "System.Title", "System.WorkItemType", "System.State",
    "System.AssignedTo", "System.CreatedDate", "System.ChangedDate",
    "Microsoft.VSTS.Scheduling.StoryPoints",
    "Microsoft.VSTS.Scheduling.OriginalEstimate",
    "Microsoft.VSTS.Scheduling.RemainingWork",
]
AZURE_LOOKBACK_DAYS = 14  # if since_ts is None, we fetch last N days
AZURE_BATCH_SIZE = 200    # workitemsbatch API max


RAW_OFFLOAD_BUCKET = os.environ.get("S3_BUCKET", "sldp-raw")
RAW_OFFLOAD_PREFIX = os.environ.get("RAW_OFFLOAD_PREFIX", "raw")
RAW_KEEP_INLINE_DAYS = int(os.environ.get("RAW_KEEP_INLINE_DAYS", "7"))    # keep payload JSON in DB this many days
RAW_RETENTION_DAYS   = int(os.environ.get("RAW_RETENTION_DAYS",   "90"))   # delete RawPayload rows & objects older than this
RAW_OFFLOAD_BATCH    = int(os.environ.get("RAW_OFFLOAD_BATCH",    "500"))  # rows per task run

VALIDATOR_DEFAULTS = {
    "max_dev_days_without_progress": 4,     # story in Dev but no dev_done_at after X days
    "max_ready_for_qa_days": 2,             # in Ready for QA > X days
    "max_qa_days": 3,                        # QA in progress > X days
    "require_points_for_types": ["story", "task"],  # which item types must have points
    "require_pr_for_types": ["story", "task"],      # PR must exist for these (when status suggests code)
    "pr_required_when_status_contains": ["Dev", "In Progress", "Ready for QA"],
    "ignore_when_subtask": True,            # don't enforce some rules on subtasks
}

SLA_DEFAULTS = {
    "blocked_hours": 48,  # global fallback
    "by_type": {          # optional per type
        "bug": 24,
        "story": 72,
        "task": 72,
        "subtask": 72,
        "epic": 168
    },
    # Optional by priority label-name (case-insensitive), first match wins
    "by_priority": {
        "critical": 12,
        "blocker": 12,
        "high": 24,
        "p0": 12,
        "p1": 24
    }
}