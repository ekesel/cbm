x-env: &default-env
  POSTGRES_DB: cbm
  POSTGRES_USER: cbm
  POSTGRES_PASSWORD: cbm

services:
  postgres:
    image: postgres:15
    environment:
      <<: *default-env
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # Console UI
    volumes:
      - miniodata:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  django:
    build: ../backend
    container_name: cbm_django
    command: ["/bin/bash", "/app/entrypoint.sh"]
    env_file:
      - ../backend/.env
    volumes:
      - ../backend:/app
    ports: ["8000:8000"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy

  celery-worker:
    build: ../backend
    container_name: cbm_celery_worker
    command: ["celery", "-A", "core", "worker", "-l", "INFO", "-Q", "default"]
    env_file:
      - ../backend/.env
    volumes:
      - ../backend:/app
    depends_on:
      django:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  celery-beat:
    build: ../backend
    container_name: cbm_celery_beat
    command: ["celery", "-A", "core", "beat", "-l", "INFO"]
    env_file:
      - ../backend/.env
    volumes:
      - ../backend:/app
    depends_on:
      django:
        condition: service_started
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy

  frontend:
    build: ../frontend
    container_name: cbm_frontend
    command: ["npm", "run", "dev", "--", "--host"]
    env_file:
      - ../frontend/.env
    volumes:
      - ../frontend:/app
    ports: ["5173:5173"]
    depends_on:
      django:
        condition: service_started

volumes:
  pgdata:
  miniodata:
